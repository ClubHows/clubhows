type Team {
  _id: String!
  name: String!
  slug: String!
  members: [Member]
  locations: [Location]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Member {
  user: String!
  role: String!
  location: [String]
}

type Location {
  _id: String!
  name: String!
  coords: Coords
  add1: String
  add2: String
  city: String
  state: String
  zip: String
  country: String
  phones: [Phone]
}

type Coords {
  lat: Float
  lon: Float
}

type Phone {
  name: String
  number: String
}

extend type Query {
  # Get all teams
  allTeams(orderBy: OrderByUserInput, filter: FilterUserInput): [Team]
  # Get all teams paginated with limit and after
  allTeamsPagination(limit: Int!, after: Int!): [Team]
  # Get team by id
  teamById(_id: String!): Team
  # Get current user
  currentTeam: Team
  # Get team by member
  teamByMember(memberId: String!, role: String): Team
  # Get team by location
  teamByLocation(locId: String!): Team
  # Get team by slug
  teamBySlug(slug: String!): Team
}

extend type Mutation {
  createTeam(input: CreateTeamUserInput!): Team!
  addLocation(input: CreateLocationUserInput!): Team!
  removeTeam(_id: String!): Team!
}

extend type Subscription {}

input CreateTeamUserInput {
  name: String!
  owner: String!
}

input CreateLocationUserInput {
  slug: String!
  name: String!
  addr1: String
  addr2: String
  city: String
  state: String
  zip: String
  country: String
  phone: String
}
